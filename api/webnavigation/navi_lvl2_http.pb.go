// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.2
// - protoc             v3.21.12
// source: webnavigation/navi_lvl2.proto

package webnavigation

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationNaviLvl2CreateNaviLvl2 = "/api.webnavigation.NaviLvl2/CreateNaviLvl2"
const OperationNaviLvl2DeleteNaviLvl2 = "/api.webnavigation.NaviLvl2/DeleteNaviLvl2"
const OperationNaviLvl2ListNaviLvl2 = "/api.webnavigation.NaviLvl2/ListNaviLvl2"
const OperationNaviLvl2SortNaviLvl2 = "/api.webnavigation.NaviLvl2/SortNaviLvl2"

type NaviLvl2HTTPServer interface {
	// CreateNaviLvl2 分类内容添加
	CreateNaviLvl2(context.Context, *CreateNaviLvl2Request) (*CreateNaviLvl2Reply, error)
	// DeleteNaviLvl2 分类内容删除
	DeleteNaviLvl2(context.Context, *DeleteNaviLvl2Request) (*DeleteNaviLvl2Reply, error)
	// ListNaviLvl2 分类内容列表，这个接口可能是多余的，因为获得分类的时候已经顺带获取了内容
	ListNaviLvl2(context.Context, *ListNaviLvl2Request) (*ListNaviLvl2Reply, error)
	// SortNaviLvl2 分类内容排序
	SortNaviLvl2(context.Context, *SortNaviLvl2Request) (*SortNaviLvl2Reply, error)
}

func RegisterNaviLvl2HTTPServer(s *http.Server, srv NaviLvl2HTTPServer) {
	r := s.Route("/")
	r.POST("/api/web-navigation/v1/create_navi_lvl2", _NaviLvl2_CreateNaviLvl20_HTTP_Handler(srv))
	r.POST("/api/web-navigation/v1/delete_navi_lvl2", _NaviLvl2_DeleteNaviLvl20_HTTP_Handler(srv))
	r.POST("/api/web-navigation/v1/sort_navi_lvl2", _NaviLvl2_SortNaviLvl20_HTTP_Handler(srv))
	r.GET("/api/web-navigation/v1/list_navi_lvl2", _NaviLvl2_ListNaviLvl20_HTTP_Handler(srv))
}

func _NaviLvl2_CreateNaviLvl20_HTTP_Handler(srv NaviLvl2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateNaviLvl2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNaviLvl2CreateNaviLvl2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateNaviLvl2(ctx, req.(*CreateNaviLvl2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateNaviLvl2Reply)
		return ctx.Result(200, reply)
	}
}

func _NaviLvl2_DeleteNaviLvl20_HTTP_Handler(srv NaviLvl2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteNaviLvl2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNaviLvl2DeleteNaviLvl2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteNaviLvl2(ctx, req.(*DeleteNaviLvl2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteNaviLvl2Reply)
		return ctx.Result(200, reply)
	}
}

func _NaviLvl2_SortNaviLvl20_HTTP_Handler(srv NaviLvl2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SortNaviLvl2Request
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNaviLvl2SortNaviLvl2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SortNaviLvl2(ctx, req.(*SortNaviLvl2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SortNaviLvl2Reply)
		return ctx.Result(200, reply)
	}
}

func _NaviLvl2_ListNaviLvl20_HTTP_Handler(srv NaviLvl2HTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListNaviLvl2Request
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationNaviLvl2ListNaviLvl2)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListNaviLvl2(ctx, req.(*ListNaviLvl2Request))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListNaviLvl2Reply)
		return ctx.Result(200, reply)
	}
}

type NaviLvl2HTTPClient interface {
	CreateNaviLvl2(ctx context.Context, req *CreateNaviLvl2Request, opts ...http.CallOption) (rsp *CreateNaviLvl2Reply, err error)
	DeleteNaviLvl2(ctx context.Context, req *DeleteNaviLvl2Request, opts ...http.CallOption) (rsp *DeleteNaviLvl2Reply, err error)
	ListNaviLvl2(ctx context.Context, req *ListNaviLvl2Request, opts ...http.CallOption) (rsp *ListNaviLvl2Reply, err error)
	SortNaviLvl2(ctx context.Context, req *SortNaviLvl2Request, opts ...http.CallOption) (rsp *SortNaviLvl2Reply, err error)
}

type NaviLvl2HTTPClientImpl struct {
	cc *http.Client
}

func NewNaviLvl2HTTPClient(client *http.Client) NaviLvl2HTTPClient {
	return &NaviLvl2HTTPClientImpl{client}
}

func (c *NaviLvl2HTTPClientImpl) CreateNaviLvl2(ctx context.Context, in *CreateNaviLvl2Request, opts ...http.CallOption) (*CreateNaviLvl2Reply, error) {
	var out CreateNaviLvl2Reply
	pattern := "/api/web-navigation/v1/create_navi_lvl2"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNaviLvl2CreateNaviLvl2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NaviLvl2HTTPClientImpl) DeleteNaviLvl2(ctx context.Context, in *DeleteNaviLvl2Request, opts ...http.CallOption) (*DeleteNaviLvl2Reply, error) {
	var out DeleteNaviLvl2Reply
	pattern := "/api/web-navigation/v1/delete_navi_lvl2"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNaviLvl2DeleteNaviLvl2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NaviLvl2HTTPClientImpl) ListNaviLvl2(ctx context.Context, in *ListNaviLvl2Request, opts ...http.CallOption) (*ListNaviLvl2Reply, error) {
	var out ListNaviLvl2Reply
	pattern := "/api/web-navigation/v1/list_navi_lvl2"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationNaviLvl2ListNaviLvl2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *NaviLvl2HTTPClientImpl) SortNaviLvl2(ctx context.Context, in *SortNaviLvl2Request, opts ...http.CallOption) (*SortNaviLvl2Reply, error) {
	var out SortNaviLvl2Reply
	pattern := "/api/web-navigation/v1/sort_navi_lvl2"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationNaviLvl2SortNaviLvl2))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
