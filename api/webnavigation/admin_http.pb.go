// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v4.23.4
// source: webnavigation/admin.proto

package webnavigation

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationAdminAdminLogin = "/api.webnavigation.Admin/AdminLogin"
const OperationAdminCreateAdmin = "/api.webnavigation.Admin/CreateAdmin"
const OperationAdminDeleteAdmin = "/api.webnavigation.Admin/DeleteAdmin"
const OperationAdminGetAdmin = "/api.webnavigation.Admin/GetAdmin"
const OperationAdminListAdmin = "/api.webnavigation.Admin/ListAdmin"
const OperationAdminListAdminOfMine = "/api.webnavigation.Admin/ListAdminOfMine"
const OperationAdminUpdateAdmin = "/api.webnavigation.Admin/UpdateAdmin"

type AdminHTTPServer interface {
	AdminLogin(context.Context, *AdminLoginRequest) (*AdminLoginReply, error)
	CreateAdmin(context.Context, *CreateAdminRequest) (*CreateAdminReply, error)
	DeleteAdmin(context.Context, *DeleteAdminRequest) (*DeleteAdminReply, error)
	GetAdmin(context.Context, *GetAdminRequest) (*GetAdminReply, error)
	ListAdmin(context.Context, *ListAdminRequest) (*ListAdminReply, error)
	ListAdminOfMine(context.Context, *ListAdminRequest) (*ListAdminReply, error)
	UpdateAdmin(context.Context, *UpdateAdminRequest) (*UpdateAdminReply, error)
}

func RegisterAdminHTTPServer(s *http.Server, srv AdminHTTPServer) {
	r := s.Route("/")
	r.POST("/api/web-navigation/v1/create_admin", _Admin_CreateAdmin0_HTTP_Handler(srv))
	r.POST("/api/web-navigation/v1/admin_login", _Admin_AdminLogin0_HTTP_Handler(srv))
	r.POST("/api/web-navigation/v1/update_admin", _Admin_UpdateAdmin0_HTTP_Handler(srv))
	r.POST("/api/web-navigation/v1/delete_admin", _Admin_DeleteAdmin0_HTTP_Handler(srv))
	r.GET("/api/web-navigation/v1/get_admin", _Admin_GetAdmin0_HTTP_Handler(srv))
	r.GET("/api/web-navigation/v1/list_admin", _Admin_ListAdmin0_HTTP_Handler(srv))
	r.GET("/api/web-navigation/v1/list_admin_of_mine", _Admin_ListAdminOfMine0_HTTP_Handler(srv))
}

func _Admin_CreateAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateAdminRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminCreateAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateAdmin(ctx, req.(*CreateAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_AdminLogin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AdminLoginRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminAdminLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AdminLogin(ctx, req.(*AdminLoginRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AdminLoginReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_UpdateAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateAdminRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminUpdateAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateAdmin(ctx, req.(*UpdateAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_DeleteAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteAdminRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminDeleteAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteAdmin(ctx, req.(*DeleteAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_GetAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAdminRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminGetAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAdmin(ctx, req.(*GetAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListAdmin0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdminRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListAdmin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdmin(ctx, req.(*ListAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdminReply)
		return ctx.Result(200, reply)
	}
}

func _Admin_ListAdminOfMine0_HTTP_Handler(srv AdminHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListAdminRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationAdminListAdminOfMine)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListAdminOfMine(ctx, req.(*ListAdminRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListAdminReply)
		return ctx.Result(200, reply)
	}
}

type AdminHTTPClient interface {
	AdminLogin(ctx context.Context, req *AdminLoginRequest, opts ...http.CallOption) (rsp *AdminLoginReply, err error)
	CreateAdmin(ctx context.Context, req *CreateAdminRequest, opts ...http.CallOption) (rsp *CreateAdminReply, err error)
	DeleteAdmin(ctx context.Context, req *DeleteAdminRequest, opts ...http.CallOption) (rsp *DeleteAdminReply, err error)
	GetAdmin(ctx context.Context, req *GetAdminRequest, opts ...http.CallOption) (rsp *GetAdminReply, err error)
	ListAdmin(ctx context.Context, req *ListAdminRequest, opts ...http.CallOption) (rsp *ListAdminReply, err error)
	ListAdminOfMine(ctx context.Context, req *ListAdminRequest, opts ...http.CallOption) (rsp *ListAdminReply, err error)
	UpdateAdmin(ctx context.Context, req *UpdateAdminRequest, opts ...http.CallOption) (rsp *UpdateAdminReply, err error)
}

type AdminHTTPClientImpl struct {
	cc *http.Client
}

func NewAdminHTTPClient(client *http.Client) AdminHTTPClient {
	return &AdminHTTPClientImpl{client}
}

func (c *AdminHTTPClientImpl) AdminLogin(ctx context.Context, in *AdminLoginRequest, opts ...http.CallOption) (*AdminLoginReply, error) {
	var out AdminLoginReply
	pattern := "/api/web-navigation/v1/admin_login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminAdminLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) CreateAdmin(ctx context.Context, in *CreateAdminRequest, opts ...http.CallOption) (*CreateAdminReply, error) {
	var out CreateAdminReply
	pattern := "/api/web-navigation/v1/create_admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminCreateAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) DeleteAdmin(ctx context.Context, in *DeleteAdminRequest, opts ...http.CallOption) (*DeleteAdminReply, error) {
	var out DeleteAdminReply
	pattern := "/api/web-navigation/v1/delete_admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminDeleteAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) GetAdmin(ctx context.Context, in *GetAdminRequest, opts ...http.CallOption) (*GetAdminReply, error) {
	var out GetAdminReply
	pattern := "/api/web-navigation/v1/get_admin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminGetAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAdmin(ctx context.Context, in *ListAdminRequest, opts ...http.CallOption) (*ListAdminReply, error) {
	var out ListAdminReply
	pattern := "/api/web-navigation/v1/list_admin"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) ListAdminOfMine(ctx context.Context, in *ListAdminRequest, opts ...http.CallOption) (*ListAdminReply, error) {
	var out ListAdminReply
	pattern := "/api/web-navigation/v1/list_admin_of_mine"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationAdminListAdminOfMine))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *AdminHTTPClientImpl) UpdateAdmin(ctx context.Context, in *UpdateAdminRequest, opts ...http.CallOption) (*UpdateAdminReply, error) {
	var out UpdateAdminReply
	pattern := "/api/web-navigation/v1/update_admin"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationAdminUpdateAdmin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
